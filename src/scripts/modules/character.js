"use strict";
/* a class to provide methods to work with PC & NPC
*/
export class Character {
    static defaultData() {
        return({
        name: '',
        location : "Home",
        inv: [],  //inventory data, needs to be mapped to Inventory-Instance
        wardrobe: [],  //separate wardobe data, needs to be mapped to outfit-Instance
        outfit: [],  // needs to be mapped to outfit-Instance
        stats: [],
        effects: [],
        rel: [],
        money : 0,
        });
    }
    constructor(externlist) {
        this._data = externlist ? externlist : Character.defaultData();
        this.Outfit = new Outfit(this,this._data.outfit);
        this.Inv = new Inventory(this,this._data.inv);
        this.Wardrobe = new Inventory(this,this._data.wardrobe);
        this.Stats = new StatsDictionary(this,this._data.stats);
        this.Effects = new Effects(this,this._data.effects);
        this.Rel = new StatsDictionary(this,this._data.rel); //Todo Relation similiar to stats?
        //create basic stats
        stHealth.setup(this.Stats,50,60),stEnergy.setup(this.Stats,30,100),stPAttack.setup(this.Stats,4,100),stPDefense.setup(this.Stats,4,100),
        stAgility.setup(this.Stats,3,100),stStrength.setup(this.Stats,3,100),stEndurance.setup(this.Stats,3,100);

        this.Effects.addItem('Tired',window.gm.EffectLib.NotTired); //depending on sleep Tired will be set to NotTired or Tired
    }
    get name() {
        return(this._data.name);    
    }
    health() {
        return({value:this.Stats.get('health').value, max:this.Stats.get('healthMax').value, min:0});
    }
    energy() {
        return({value:this.Stats.get('energy').value, max:this.Stats.get('energyMax').value, min:0});
    }

    addEffect(id,effect) {
        this.Effects.addItem(id,effect);   // CanOfCoffee:Energyzed,Energyzed
    }
    /*gainStat(id,val) {
        var _x = this.Stats.get(id);
        var old = _x.value; 
        var _new = Math.max(_x.min,Math.min(_x.max,old+val));
        _x.value = _new;
        if(_new-old>=0) {
            window.gm.pushLog('<statup>'+id+" regenerated by "+(_new-old).toString()+"</statup></br>");
        } else {
            window.gm.pushLog('<statdown>'+id+" decreased by "+(_new-old).toString()+"</statdown></br>");
        }
    }*/

    gainRelation(char,val) {
        this.Rel.addItem(char);
        var _x = this.Rel.get(char);
        var old = _x.value; 
        var _new =old+val; //Math.max(_x.min,Math.min(_x.max,old+val));
        _x.value = _new;
        var diff = _new-old;
        if(diff>0) {
            window.gm.pushLog('<statup>Your relation to '+char+" improved by "+diff.toString()+"</statup></br>");
        } else if (diff<0) {
            window.gm.pushLog('<statdown>Your relation to '+char+" worsend by "+diff.toString()+"</statdown></br>");
        } else {
            window.gm.pushLog('Your relation to '+char+" wasnt affected at all by your behaviour.</br>");
        }
    }
}